module counter_up_down_moore(count,enable,reset,clk);
	input reset,clk;
	input enable;
	output [1:0]count;
	
	reg [1:0] count,state,next_state;
	
	parameter
		s_0=2'b00,
		s_1=2'b01,
		s_2=2'b10,
		s_3=2'b11;
	/*	
	always @( posedge clk)
		if(reset)
			state<=s_0;
		else
			state<=next_state;
	*/
	
	always @(state,enable)
		case (state)
			s_0:
				begin
					if(enable==01)
						begin
							count<=2'b00;
							next_state<=s_1;
						end
					
					else if(enable==10)
						next_state<=s_3;
						
					else if(enable==(00|11))
						next_state<=s_0;
				end
			
			s_1:
				begin
					if(enable==01)
						begin
							count<=2b'01;
							next_state<=s_2;
						end
						
					else if(enable==10)
						next_state<=s_0;
						
					else if(enable==(00|11))
						next_state<=s_1;
				end
			
			s_2:
				begin
					
					if(enable==01)
						begin
							count<=2'b10;
							next_state<=s_3;
						end
					else if(enable==10)
						next_state<=s_1;
						
					else if(enable==(00|11))
						next_state<=s_2;
				end
	
			s_3:
				begin
					if(enable==01)
						begin
							count<=2b'11;
							next_state<=s_0;
						end
						
					else if(enable==10)
						next_state<=s_0;
						
					else if(enable==(00|11))
						next_state<=s_3;
				end
				
			default: 
			    begin
				    count<=2'bxx;
					 next_state<=2'bxx;
				end
		endcase
endmodule
